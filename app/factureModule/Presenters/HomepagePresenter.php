<?php

namespace App\factureModule\Presenters;

use Nette\Application\UI\Form;
use Nette\Utils\DateTime;

class HomepagePresenter extends \BasePresenter {

  public $lf;

  public function startup() {

    if (!$this->user->isLoggedIn()) {
      $this->flashMessage('nedostatečná oprávnění');
      $this->redirect(':public:Homepage:default');
    }

    parent::startup(); // TODO: Change the autogenerated stub
  }

  public function handleGeneratePdf($id, $type) {
      $this->factureModel->initId($id);
      $facture = $this->factureModel->getRowByValue('id_facture', $id);
      $customer = $this->factureModel->getCustomer()->getRow();
      $supplier = $this->supplierModel->getRow();
      $customer = $this->customerModel->addKeyPrefix($customer, 'customer_');
      $supplier = $this->supplierModel->addKeyPrefix($supplier, 'supplier_');
      $factureNumber = $this->supplierModel->get('nextFactureNumber');

      bdump($facture['factureNumber']);
      $facture['factureNumber'] = $facture['factureNumber'] === 0 ? $factureNumber : $facture['factureNumber'];

    if($type == \pdfModel::PDF_VIEW) {
        $this->pdfModel->generatePdfView((array)$facture + (array)$customer + (array)$supplier);
    } else {
      $this->pdfModel->generatePdfDownland((array)$facture + (array)$customer + (array)$supplier);
      if ($this->factureModel->get('state') === 'created') {
        $this->supplierModel->update(array('nextFactureNumber' => ($factureNumber + 1)));
        $this->factureModel->update(array('factureNumber' => $factureNumber, 'state' => 'download'));
      }
    }
    
    if ($this->isAjax()) {
      $this->template->table = $this->factureModel->getFactureForRender();
      $this->redrawControl();
    }
  }

  public function handleFacturePay() {
    if(!$this->isAjax()) {
      $this->redirect('this');
    }

    $values = $this->getHttpRequest()->getPost();

    $this->factureModel->initId($values['id']);
    if($values['type'] !== 'pay') {
      $this->factureModel->update(array('state' => 'pay'));
    } else {
      $this->factureModel->update(array('state' => 'download'));
    }
    $this->template->table = $this->factureModel->getFactureForRender($values['value']);
    $this->redrawControl();
  }

  public function handleChooseSome() {

    if (!$this->isAjax()) {
      $this->redirect('this');
    }
    $value = $this->getHttpRequest()->getPost()['value'];
    $this->template->table = $this->factureModel->getFactureForRender($value);
    $this->redrawControl();
  }

  public function renderCustomer() {
      $this->template->table = $this->customerModel->getTable();
      $this->template->columNames = $this->customerModel->getColumnNames();
  }

  public function renderDefault() {
    if (!$this->isAjax()) {
      $this->template->table = $this->factureModel->getFactureForRender();
      $this->template->columNames = $this->factureModel->getColumnNames();
    }
  }


  public function createComponentFactureForm() {
    $form = new Form;
    $form->addText('id_facture')
         ->setHtmlType('hidden');
    $form->addSelect('customer_id', 'Odběratel', $this->customerModel->getIntoSelectBox())
         ->setPrompt('---')
         ->setRequired();
    $form->addText('initDate', 'Datum vystavení')
         ->setHtmlType('date')
         ->setHtmlAttribute('placeholder', 'např 1. 1. 1997');
    $form->addTextArea('text', 'Text faktury');
    $form->addText('value', 'Částka')
         ->setHtmlType('number')
         ->setHtmlAttribute('placeholder', 'Částka v korunách')
         ->setRequired();
    $form->addText('factureNumber', 'číslo faktury')
         ->setHtmlAttribute('placeholder', 'nevyplnovat');
    $form->addSubmit('send', 'Generovat pdf');
    $form->addText('factureName', 'Jméno faktury')
         ->setHtmlAttribute('palceholder', 'Např. Faktura kveten staveni');

      $id = $this->getParameter('id');
      if ($id) {
          $this->factureModel->initId($id);
          $form->setDefaults($this->factureModel->getRow());
      }
    $form->onSuccess[] = [$this, 'factureFormSuccess'];

    return $form;
  }

  public function factureFormSuccess($form, $values) {
    $array = (array)$values;

    $id = $array['id_facture'];

    $date = DateTime::from($array['initDate']);
    $clone = $date->modifyClone('+14 day');
    $array['initDate'] = $date->format('d. m. Y');
    $array['limitDate'] = $clone->format('d. m. Y');

    if($id) {
        $this->factureModel->initId($id);
        $this->factureModel->update($array);
    } else {
      $array['state'] = 'created';
      $this->factureModel->insert($array);
    }
    $this->flashMessage('Faktura byla úspěšně uložena!');
    $this->redirect('Homepage:default');
  }

  public function createComponentCustomerForm() {
    $form = new form;

    $form->addText('id_customer')
         ->setHtmlType('hidden');
    $form->addText('name', 'Jméno šablony')
         ->setHtmlAttribute('placeholder', 'např. Fakturace Pepik')
         ->setRequired();
    $form->addText('firma', 'Firma')
         ->setHtmlAttribute('placeholder', 'např. bla s.r.o')
         ->setRequired();
    $form->addText('street', 'Ulice')
         ->setHtmlAttribute('placeholder', 'např. Radní');
    $form->addText('houseNumber', 'ČP')
         ->setHtmlAttribute('placeholder', 'např. 407')
         ->setRequired();
    $form->addText('city', 'Město')
         ->setHtmlAttribute('placeholder', 'např. Praha')
         ->setRequired();
    $form->addText('cityPostCode', 'PSČ')
         ->setHtmlAttribute('placeholder', 'např. 56031')
         ->setRequired();
    $form->addText('ico', 'IČO')
         ->setHtmlAttribute('placeholder', 'např. 993121212122')
         ->setRequired();
    $form->addText('dico', 'DIČO')
         ->setHtmlAttribute('placeholder', 'např. 993121743432')
         ->setRequired();
    $form->addSubmit('send', 'Uložit');

    $id = $this->getParameter('id');
    if ($id) {
      $this->customerModel->initId($id);
      $form->setDefaults($this->customerModel->getRow());
    }
    $form->onSuccess[] = [$this, 'CustomerFormSuccess'];
    return $form;
  }

  public function createComponentSupplierForm() {
    $form = new form;
    $form->addText('firstName', 'Jméno')
         ->setHtmlAttribute('placeholder', 'např. Jan')
         ->setRequired();
    $form->addText('lastName', 'Přijmení')
         ->setHtmlAttribute('placeholder', 'např. Novák')
         ->setRequired();
    $form->addText('street', 'Ulice')
         ->setHtmlAttribute('placeholder', 'např. Radní');
    $form->addText('houseNumber', 'ČP')
         ->setHtmlAttribute('placeholder', 'např. 407')
         ->setRequired();
    $form->addText('city', 'Město')
         ->setHtmlAttribute('placeholder', 'např. Praha')
         ->setRequired();
    $form->addText('cityPostCode', 'PSČ')
         ->setHtmlAttribute('placeholder', 'např. 56031')
         ->setRequired();
    $form->addText('ico', 'IČO')
         ->setHtmlAttribute('placeholder', 'např. 993121212122')
         ->setRequired();
    $form->addText('tel', 'Telefon')
         ->setHtmlAttribute('placeholder', 'včetně předvolby, např. 00420739549728')
         ->setRequired();
    $form->addText('dueDays', 'Splatnost ( dny )')
         ->setHtmlAttribute('placeholder', 'splatnost faktury')
         ->setRequired();
    $form->addText('bank', 'Banka')
         ->setHtmlAttribute('placeholder', 'Např. Moneta');
    $form->addText('swift', 'SWIFT')
         ->setHtmlAttribute('placeholder', 'SWIFT');
    $form->addText('iban', 'IBAN')
         ->setHtmlAttribute('placeholder', 'IBAN');
    $form->addText('bankNumber', 'Číslo účtu')
         ->setHtmlAttribute('placeholder', 'včetně lomítka')
         ->setRequired();
    $form->addText('nextFactureNumber', 'Číslo další faktury')
         ->setHtmlType('number')
         ->setRequired();
    $form->addSubmit('send', 'Uložit');
    $form->setDefaults($this->context->createInstance('supplierModel')
                                     ->getRow()
    );

    $form->onSuccess[] = [$this, 'SupplierFormSuccess'];
    return $form;
  }

  public function customerFormSuccess($form, $values) {
    $id = $values->id_customer;
    try {
      if ($id) {
        $this->customerModel->initId($id);
        $this->customerModel->update($values);
      } else {
        $this->customerModel->insert($values);

      }
    } catch (\Exception $e) {
      $this->flashMessage($e->getMessage());
    }
    $this->flashMessage('úspěšně uloženo!');
    $this->redirect('this');
  }

  public function supplierFormSuccess($form, $values) {
        try {
          $this->supplierModel->update($values);
          $this->flashMessage('úspěšně uloženo!');
          $this->redirect('this');
        } catch (\Exception $e) {
          $this->flashMessage($e->getMessage());
        }
  }


  public function handleOut() {
    $this->getUser()
      ->logout();
    $this->flashMessage('Byl jste odhlášen.');
    $this->redirect(':public:Homepage:default');
  }


}


